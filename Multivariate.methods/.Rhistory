library(readxl)
driver_profile <- read_excel("G:/My Drive/Github/Multivariate-Statistics-R/driver.profile.xlsx")
View(driver_profile)
library(readxl)
driver_profile <- read_excel("G:/My Drive/Github/Multivariate-Statistics-R/driver.profile.xlsx")
View(driver_profile)
##pg
#6
n = dim(driver_profile)[1]
mu1.15 = apply(driver_profile[c(1,5),1:20], 2, mean)
driver_profile[c(1,5),1:20]
driver_profile[1:20,c(1,5)]
mu1.15 = apply(driver_profile[1:20,c(1,5)], 2, mean)
mu0.6 = c(117, 47)
cov6 = matrix(c(687, -2, -2, 173), byrow = T, nrow = 2)
View(cov6)
z2.6 = n*t(mu1.15-mu0.6)%*%solve(cov6)%*%(mu1.15-mu0.6)
pz2.6 = dchisq(z2.6, 2) #Z2 is distributed as chisq(p), p : degree of freedom if null is true
pz2.6
#7
z2.7 = n*t(mu1.15-mu0.6)%*%solve(cov(driver_profile[1:20,c(1,5)]))%*%(mu1.15-mu0.6)
f = 19/40*z2.7
###KJ UAS
library(readxl)
library(Hotelling)
##esai
#2a
mu0.2 = c(123,33,87,227,45,283)
hotelling.test(driver_profile[21:40,], mu0.2)
data("container.df")
View(container.df)
View(container.df)
hotelling.test(driver_profile[21:40,1:6], mu0.2)
hotelling.test(driver_profile[21:40,1:6], mu= mu0.2)
hotelling.test(as.matrix(driver_profile[21:40,1:6]), mu= mu0.2)
library(MASS)
library(stests)
library(ggplot2)
library(rgl)
library(car)
library(RColorBrewer)
library(stats)
library(gridExtra)
library(tidyverse)
library(DescTools)
library(MVN)
##Testing when the covariance matrix is known
#similar to univariate case, lets start with testing means when the covariance is known.
#simulate the samples
meanvect = c(13,5,1250)
cov_m = matrix(c(124,123,47,
123,203,162,
47,162,3257), ncol = 3)
#define a function to sample from a MN dist
set.seed(123)
gen.data = function(mu, sigma, n) {
require(MASS)
dt = mvrnorm(n, mu=mu, Sigma=sigma) #samples
meandt = mean(dt)
return(dt)
}
gen.samples = gen.data(meanvect, cov_m, 300)
##esai
#2a
str(gen.samples)
#Using hotellingT2 function from desctools package for unknown covariance matrix
HotellingsT2Test(gen.samples, mu = mu, cov_m)
#Testing for one sample
#Lets test the generated sample gen.samples with the null hypothesis mu* = mu = c(10,5,1200)
#Known covariance matrix (we use the covariance of the previous normal distribution)
n = dim(gen.samples)[1]
mu.sam = apply(gen.samples, 2, mean)
mu = c(10, 5, 1200)
#Using hotellingT2 function from desctools package for unknown covariance matrix
HotellingsT2Test(gen.samples, mu = mu, cov_m)
library(DescTools)
HotellingsT2Test(as.matrix(driver_profile[21:40,1:6]), mu= mu0.2)
###KJ UAS
library(readxl)
library(DescTools)
HotellingsT2Test(as.matrix(driver_profile[21:40,1:6]), mu= mu0.2)
as.matrix(driver_profile[21:40,1:6]
as.matrix(driver_profile[21:40,1:6])
as.matrix(driver_profile[21:40,1:6])
HotellingsT2Test(as.matrix(driver_profile[21:40,1:6]), mu= mu0.2)
mu1.2 = apply(driver_profile[21:40,1:6], 2, mean)
z2.2 = n*t(mu1.2-mu0.2)%*%solve(cov(as.matrix(driver_profile[21:40,1:6])))%*%(mu1.2-mu0.2)
##pg
#6
n = 20
z2.6 = n*t(mu1.15-mu0.6)%*%solve(cov6)%*%(mu1.15-mu0.6)
pz2.6 = dchisq(z2.6, 2) #Z2 is distributed as chisq(p), p : degree of freedom if null is true
pz2.6
#7
z2.7 = n*t(mu1.15-mu0.6)%*%solve(cov(driver_profile[1:20,c(1,5)]))%*%(mu1.15-mu0.6)
#8
f = 19/40*z2.7
##esai
#2a
mu0.2 = c(123,33,87,227,45,283)
mu1.2 = apply(driver_profile[21:40,1:6], 2, mean)
z2.2 = n*t(mu1.2-mu0.2)%*%solve(cov(as.matrix(driver_profile[21:40,1:6])))%*%(mu1.2-mu0.2)
HotellingsT2Test(as.matrix(driver_profile[21:40,1:6]), mu= mu0.2)
#define a function to sample from a MN dist
set.seed(123)
gen.data = function(mu, sigma, n) {
require(MASS)
dt = mvrnorm(n, mu=mu, Sigma=sigma) #samples
meandt = mean(dt)
return(dt)
}
gen.samples = gen.data(meanvect, cov_m, 300)
#Testing for one sample
#Lets test the generated sample gen.samples with the null hypothesis mu* = mu = c(10,5,1200)
#Known covariance matrix (we use the covariance of the previous normal distribution)
n = dim(gen.samples)[1]
mu.sam = apply(gen.samples, 2, mean)
mu = c(10, 5, 1200)
z2 = n*t(mu.sam-mu)%*%solve(cov_m)%*%(mu.sam-mu)
#Using hotellingT2 function from desctools package for unknown covariance matrix
HotellingsT2Test(gen.samples, mu = mu, cov_m)
##esai
#2a
data2 = driver_profile[21:40,1:6]
View(data2)
z2.2 = n*t(mu1.2-mu0.2)%*%solve(cov(data2))%*%(mu1.2-mu0.2)
HotellingsT2Test(data2, mu= mu0.2)
##pg
#6
n = 20
z2.2 = n*t(mu1.2-mu0.2)%*%solve(cov(data2))%*%(mu1.2-mu0.2)
#2b
t.test(data2$v1, 123)
#2b
t.test(data2$v1, mu= 123)
t.test(data2$v1, mu= 123)
#2b
t.test(data2$v1, mu= 123)
t.test(data2$v1, mu= 33)
t.test(data2$v1, mu= 87)
t.test(data2$v1, mu= 227)
t.test(data2$v1, mu= 45)
t.test(data2$v1, mu= 283)
t.test(data2$v2, mu= 33)
t.test(data2$v3, mu= 87)
t.test(data2$v4, mu= 227)
t.test(data2$v5, mu= 45)
t.test(data2$v6, mu= 283)
#2b
t.test(data2$v1, mu= 123)
t.test(data2$v2, mu= 33)
t.test(data2$v3, mu= 87)
t.test(data2$v4, mu= 227)
t.test(data2$v5, mu= 45)
t.test(data2$v6, mu= 283)
##1b
y2bar = apply(kel1vkel2[21:40,],2,mean)
##1b
data3 = driver_profile[41:60,1:6]
y2bar = apply(data2,2,mean)
y3bar = apply(data3,2,mean)
n2 = dim(data2)[1]
n3 = dim(data3)[1]
w2 = (n2-1)*cov(data2)
w3 = (n3-1)*cov(data3)
spl = (1/(n2+n3-2))*(w2+w3)
t2 = (n2*n3/(n2+n3))*t(y2bar-y3bar)%*%solve(spl)%*%(y2bar-y3bar)
p = dim(data2)[2]
f = (n2+n3-p-1)/((n2+n3-2)*p)*t2
f
library(Hotelling)
t2 = HotellingsT2(data2,data3)
t2 = HotellingsT2Test(data2,data3)
t2
t.test(data2$v1, data3$v1)
t.test(data2$v2, data3$v2)
t.test(data2$v3, data3$v1)
t.test(data2$v1, data3$v1)
t.test(data2$v2, data3$v2)
t.test(data2$v3, data3$v3)
t.test(data2$v4, data3$v4)
t.test(data2$v5, data3$v5)
t.test(data2$v6, data3$v6)
t2
df(0.975, 6, 33)
qf(0.975, 6, 33)
qf(0.95, 6, 33)
#3c
#info var3
x2barp = apply(data2[,-3],2,mean)
x3barp = apply(data3[,-3],2,mean)
w2p = (n2-1)*cov(data2[,-3])
w3p = (n3-1)*cov(data3[,-3])
splp = (1/(n2+n3-2))*(w2p+w3p)
t2p = (n2*n3/(n2+n3))*t(x2barp-x3barp)%*%solve(splp)%*%(x2barp-x3barp)
t2p
pp = dim(data2[,-1])[2]
qq = 1
t_pq = (n2+n3-2-pp)*(t2-t2p)/(n2+n3-2+t2p)
t_pq
qq = 1
t_pq = (n2+n3-2-pp)*(t2-t2p)/(n2+n3-2+t2p)
t2p = as.numeric((n2*n3/(n2+n3))*t(x2barp-x3barp)%*%solve(splp)%*%(x2barp-x3barp))
t_pq = (n2+n3-2-pp)*(t2-t2p)/(n2+n3-2+t2p)
t2
t2$statistic
t2$statistic[1,1]
t_pq = (n2+n3-2-pp)*(t2$statistic[1,1]-t2p)/(n2+n3-2+t2p)
t_pq
f_pq = (n2+n3-2-pp-qq+1)*(t2$statistic[1,1]-t2p)/((n2+n3-2+t2p)*qq)
f_pq
#3c
#info var3
x2barp = apply(data2[,-3],2,mean)
x3barp = apply(data3[,-3],2,mean)
w2p = (n2-1)*cov(data2[,-3])
w3p = (n3-1)*cov(data3[,-3])
splp = (1/(n2+n3-2))*(w2p+w3p)
t2p = as.numeric((n2*n3/(n2+n3))*t(x2barp-x3barp)%*%solve(splp)%*%(x2barp-x3barp))
t2p
da.k = matrix(c(4,9,3,11,7,3,31,21), nrow = 4, byrow = T)
View(da.k)
da.k = matrix(c(4,9,3,11,7,3,31,21), nrow = 4)
mu.k = c(5,11)
library(DescTools)
mu.k = apply(da.k, 2, mean)
mu0.k = c(5,11)
z2.k = 4*t(mu.k-mu0.k)%*%solve(cov(da.k))%*%(mu.k-mu0.k)
z2.k
cov(da.k)
library(readxl)
height <- read_excel("G:/My Drive/Github/Multivariate-Statistics-R/height.xlsx")
View(height)
#1
height.l = rbind(height$v1,height$v3)
View(height.l)
#1
height.l = c(height$v1,height$v3)
#1
height.l = c(height$v1,height$v3)
t.test(height.l, mu = 180, sigma = 90)
t.test(height.l, mu = 1800)
t.test(height.l, mu = 180, sigma = 90)
t.test(height.l, mu = 180)
t.test(height.l, mu = 180)
t.test(height.l, mu = 180, sigma = 90)
t.test(height.l, mu = 180)
install.packages("BSDA")
library(BSDA)
z.test(height.l, mu = 180, sigma.x = 90)
z.test(height.l, mu = 180)
z.test(height.l, mu = 180, sigma.x = 100)
z.test(height.l, mu = 180, sigma.x = 1)
z.test(height.l, mu = 180, sigma.x = 90)
height.p = c(height$v2, height$v4)
z.test(height.p, mu = 150, sigma.x = 50)
height2 = cbind(height.l, height.p)
mu.ke = apply(height2, 2, mean)
cov.ke = matrix(c(90, 52, 50, 52), nrow = 2)
View(cov.ke)
cov.ke = matrix(c(90, 52, 50, 52), nrow = 2, byrow = T)
z2.ke = 50*t(mu.ke-c(180,150))%*%solve(cov.ke)%*%(mu.ke-c(180,150))
z2.k
z2.ke
p.z2ke = dchisq(z2.ke, 2)
p.z2ke
library(DescTools)
HotellingsT2Test(height2, mu = mu.ke)
HotellingsT2Test(height2, mu =c(180,150))
HotellingsT2Test(height2, mu =c(180,150), sigma = cov.ke)
cov(height2)
#2
y2bar = apply(height[,1:2],2,mean)
y3bar = apply(height[,3:4],2,mean)
n2 = dim(height[,1:2])[1]
n3 = dim(height[,1:2])[1]
w2 = (n2-1)*cov(height[,1:2])
w3 = (n3-1)*cov(height[,3:4])
spl = (1/(n2+n3-2))*(w2+w3)
View(spl)
View(w2)
t2 = (n2*n3/(n2+n3))*t(y2bar-y3bar)%*%solve(spl)%*%(y2bar-y3bar)
p = dim(height)[2]
p = dim(height[,1:2])[2]
f = (n2+n3-p-1)/((n2+n3-2)*p)*t2
f
t2 = HotellingsT2Test(height[,1:2], height[,3:4])
t2 = HotellingsT2Test(height[,1:2], height[,3:4])
t2$statistic[1,1]
t2

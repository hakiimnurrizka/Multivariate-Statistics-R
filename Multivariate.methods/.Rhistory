lda_iris
line(iris$Sepal.Length)
plot(line(iris$Sepal.Length))
iris %>% ggplot(aes(Sepal.Length, 0), color = Species) + geom_point(alpha = 1.8, size = 2.5, col = iris$spec) +
scale_color_manual(values = c('black', 'red', 'green')) + labs(x='Feature_1', y="Feature_2")
iris %>% ggplot(aes(0, Petal.Length), color = Species) + geom_point(alpha = 1.8, size = 2.5, col = iris$spec) +
scale_color_manual(values = c('black', 'red', 'green')) + labs(x='Feature_1', y="Feature_2")
iris %>% ggplot(aes(Sepal.Length, Petal.Length), color = Species) + geom_point(alpha = 1.8, size = 2.5, col = iris$spec) +
geom_abline(lda_iris$scaling) + scale_color_manual(values = c('black', 'red', 'green')) + labs(x='Feature_1', y="Feature_2")
lda_iris$scaling
as.vector(lda_iris$scaling)
lda_iris$lev
lda_iris$svd
lda_iris$call
iris[,1:2]%*%lda_iris$scaling
iris[,1:2]%*%as.vector(lda_iris$scaling)
iris[,1:2]%*%matrix(lda_iris$scaling)
matrix(lda_iris$scaling)
iris[,1:2]
matrix(iris[,1:2])
as.matrix(iris[,1:2])
as.matrix(iris[,1:2])%*%matrix(lda_iris$scaling)
abline(b= c(1,2))
plot(lda_iris)
lda_pred = data.frame(iris[,1:2], y = as.numeric(predict(lda_iris, iris[,1:2])$class))
iris %>% ggplot(aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point() +
stat_contour(iris, aes(x = Sepal.Length, y = Petal.Length , z = Species), data = lda_pred) + ggtitle(“LDA Decision Boundaries”)
iris %>% ggplot(aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point() +
stat_contour(aes(x = iris$Sepal.Length, y = iris$Petal.Length , z = iris$Species), data = lda_pred) +
ggtitle(“LDA Decision Boundaries”)
iris %>% ggplot(aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point() +
stat_contour(aes(x = iris$Sepal.Length, y = iris$Petal.Length , z = iris$Species), data = lda_pred)
View(lda_pred)
lda_pred = data.frame(iris[,1:2], Species = as.numeric(predict(lda_iris, iris[,1:2])$class))
iris %>% ggplot(aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point() +
stat_contour(aes(x = iris$Sepal.Length, y = iris$Petal.Length , z = iris$Species), data = lda_pred)
lda_pred = data.frame(iris[,1:2], Species = as.factor(predict(lda_iris, iris[,1:2])$class))
iris %>% ggplot(aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point() +
stat_contour(aes(x = iris$Sepal.Length, y = iris$Petal.Length , z = iris$Species), data = lda_pred)
iris %>% ggplot(aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point() +
stat_contour(aes(x = iris$Sepal.Length, y = iris$Petal.Length , z = iris$spec), data = lda_pred)
str(iris$spec)
lda_pred = data.frame(iris[,1:2], Species = as.numeric(predict(lda_iris, iris[,1:2])$class))
iris %>% ggplot(aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point() +
stat_contour(aes(x = iris$Sepal.Length, y = iris$Petal.Length , z = iris$spec), data = lda_pred)
iris %>% ggplot(aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point() +
stat_function(aes(x = iris$Sepal.Length, y = iris$Petal.Length , z = iris$spec), data = lda_pred)
#Do prediction to actual data
contour_data = expand.grid(X1 = seq(-8, 8, length = 300), X2 = seq(-8, 8, length = 300))
lda_pred = data.frame(contour_data, Species = as.numeric(predict(lda_iris, iris[,1:2])$class))
iris %>% ggplot(aes(Sepal.Length, Petal.Length), color = Species) + geom_point(alpha = 1.8, size = 2.5, col = iris$spec) +
scale_color_manual(values = c('black', 'red', 'green')) + labs(x='Feature_1', y="Feature_2")
iris %>% ggplot(aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point() +
stat_(aes(x = iris$Sepal.Length, y = iris$Petal.Length , z = iris$spec), data = lda_pred)
iris %>% ggplot(aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point() +
stat_contour(aes(x = iris$Sepal.Length, y = iris$Petal.Length , z = iris$spec), data = lda_pred)
da_predict = data.frame(contour_data, y = as.numeric(predict(lda_iris, contour_data)$class))
#Do prediction to actual data
contour_data = expand.grid(iris[,1:2])
da_predict = data.frame(contour_data, y = as.numeric(predict(lda_iris, contour_data)$class))
rm(da_predict)
lda_predict = data.frame(contour_data, y = as.numeric(predict(lda_iris, contour_data)$class))
iris %>% ggplot(aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point() +
stat_contour(aes(x = iris$Sepal.Length, y = iris$Petal.Length , z = iris$spec), data = lda_pred)
rm(lda_pred)
lda_predict = data.frame(contour_data, y = as.numeric(predict(lda_iris, contour_data)$class))
View(lda_predict)
#Do prediction to actual data
lda_predict = data.frame(iris[,1:2], y = as.numeric(predict(lda_iris, contour_data)$class))
#Do prediction to actual data
lda_predict = data.frame(iris[,1:2], Species = as.numeric(predict(lda_iris, iris[,1:2])$class))
View(lda_predict)
iris %>% ggplot(aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point() +
stat_smooth(aes(x = iris$Sepal.Length, y = iris$Petal.Length , z = iris$Species), data = lda_pred)
iris %>% ggplot(aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point() +
stat_smooth(aes(x = iris$Sepal.Length, y = iris$Petal.Length , z = iris$Species), data = lda_predict)
rm(lda_predict)
iris %>% ggplot(aes(Sepal.Length, Petal.Length), color = Species) + geom_point(alpha = 1.8, size = 2.5, col = iris$spec) +
scale_color_manual(values = c('black', 'red', 'green')) + labs(x='Feature_1', y="Feature_2")
iris %>% ggplot(aes(Sepal.Length, Petal.Length), color = Species) + geom_point(alpha = 1.8, size = 2.5, col = iris$spec) +
geom_segment(aes(x = 0, xend = 8, y = 0, yend = 6)) +
scale_color_manual(values = c('black', 'red', 'green')) + labs(x='Feature_1', y="Feature_2")
iris %>% ggplot(aes(Sepal.Length, Petal.Length), color = Species) + geom_point(alpha = 1.8, size = 2.5, col = iris$spec) +
geom_segment(aes(x = 4, xend = 8, y = 0, yend = 6)) +
scale_color_manual(values = c('black', 'red', 'green')) + labs(x='Feature_1', y="Feature_2")
iris %>% ggplot(aes(Sepal.Length, Petal.Length), color = Species) + geom_point(alpha = 1.8, size = 2.5, col = iris$spec) +
geom_segment(aes(x = 4, xend = 8, y = 0, yend = 5.2)) +
scale_color_manual(values = c('black', 'red', 'green')) + labs(x='Feature_1', y="Feature_2")
iris %>% ggplot(aes(Sepal.Length, Petal.Length), color = Species) + geom_point(alpha = 1.8, size = 2.5, col = iris$spec) +
geom_segment(aes(x = 4.3, xend = 8, y = 0, yend = 5.2)) +
scale_color_manual(values = c('black', 'red', 'green')) + labs(x='Feature_1', y="Feature_2")
iris %>% ggplot(aes(Sepal.Length, Petal.Length), color = Species) + geom_point(alpha = 1.8, size = 2.5, col = iris$spec) +
geom_segment(aes(x = 4.3, xend = 7.2, y = 0, yend = 5.2)) +
scale_color_manual(values = c('black', 'red', 'green')) + labs(x='Feature_1', y="Feature_2")
lda_iris$scaling
# Plot of the discriminant function line
iris %>% ggplot(aes(Sepal.Length, Petal.Length), color = Species) + geom_point(alpha = 1.8, size = 2.5, col = iris$spec) +
geom_segment(aes(x = 4.3, xend = 7.2, y = 0, yend = 8.2)) +
scale_color_manual(values = c('black', 'red', 'green')) + labs(x='Feature_1', y="Feature_2")
# Plot for discriminant between 2 categories
plot(lda_iris)
# Plot for discriminant between 2 categories
plot(lda_iris, col = as.integer(iris$Species))
# Plot for discriminant between 2 categories
plot(lda_iris dimen)
# Plot for discriminant between 2 categories
plot(lda_iris)
lda_iris$xlevels
str(lda_iris$xlevels)
unlist(lda_iris$xlevels)
lda_iris$call
lda_iris$scaling
partimat(Species ~. , data = iris[,1:3], method = "lda")
iris %>% ggplot(aes(Sepal.Length, Petal.Length), color = Species) + geom_point(alpha = 1.8, size = 2.5, col = iris$spec) +
scale_color_manual(values = c('black', 'red', 'green')) + labs(x='Feature_1', y="Feature_2")
partimat(Species ~. , data = iris[,1:3], method = "lda")
# Plot of the discriminant function line
iris %>% ggplot(aes(Sepal.Length, Petal.Length), color = Species) + geom_point(alpha = 1.8, size = 2.5, col = iris$spec) +
geom_segment(aes(x = 4.3, xend = 7.2, y = 2.5, yend = 3.5)) +
scale_color_manual(values = c('black', 'red', 'green')) + labs(x='Feature_1', y="Feature_2")
# Plot of the discriminant function line
iris %>% ggplot(aes(Sepal.Length, Petal.Length), color = Species) + geom_point(alpha = 1.8, size = 2.5, col = iris$spec) +
geom_segment(aes(x = -4.3, xend = -7.2, y = 2.5, yend = 3.5)) +
scale_color_manual(values = c('black', 'red', 'green')) + labs(x='Feature_1', y="Feature_2")
# Plot of the discriminant function line
iris %>% ggplot(aes(Sepal.Length, Petal.Length), color = Species) + geom_point(alpha = 1.8, size = 2.5, col = iris$spec) +
geom_segment(aes(x = 5.5, xend = 6.5, y = 1, yend = 5)) +
scale_color_manual(values = c('black', 'red', 'green')) + labs(x='Feature_1', y="Feature_2")
# Plot of the discriminant function line
iris %>% ggplot(aes(Sepal.Length, Petal.Length), color = Species) + geom_point(alpha = 1.8, size = 2.5, col = iris$spec) +
geom_segment(aes(x = 4.3, xend = 7.2, y = 2.5, yend = 3.5)) +
scale_color_manual(values = c('black', 'red', 'green')) + labs(x='Feature_1', y="Feature_2")
iris %>% ggplot(aes(Sepal.Length, Petal.Length), color = Species) + geom_point(alpha = 1.8, size = 2.5, col = iris$spec) +
geom_segment(aes(x = 5.5, xend = 6.5, y = 1, yend = 3)) +
scale_color_manual(values = c('black', 'red', 'green')) + labs(x='Feature_1', y="Feature_2")
# Get the coordinate for lda plot
predict(lda_iris
# Get the coordinate for lda plot
predict(lda_iris)
# Get the coordinate for lda plot
predict(lda_iris)
# Get the coordinate for lda plot
plot(predict(lda_iris)$posterior)
partimat(Species ~. , data = iris[,1:3], method = "lda")
# Get the coordinate for lda plot
plot(predict(lda_iris)$posterior)
# Get the coordinate for lda plot
plot(lda_iris
# Get the coordinate for lda plot
plot(lda_iris)
# Get the coordinate for lda plot
plot(lda_iris)
ggplot(aes(x = predict(lda_iris)$x, y =0)) + geom_point(alpha = 1.8, size = 2.5, col = iris$spec)
ggplot(aes(x = predict(lda_iris)$x, y =0)) + geom_point(alpha = 1.8, size = 2.5)
ggplot(aes(x = predict(lda_iris)$x, y =0)) + geom_point()
iris$pred = predict(lda_iris)$x
View(iris)
iris %>% ggplot(aes(x = pred, y = 0)) + geom_point()
iris %>% ggplot(aes(x = pred, y = 0)) + geom_point(alpha = 1.8, size = 2.5, col = iris$spec) +
scale_color_manual(values = c('black', 'red', 'green')) + labs(x='Feature_1', y="Feature_2")
iris %>% ggplot(aes(x = pred, y = 0)) + geom_point(alpha = 1.8, size = 2.5, col = iris$spec) +
scale_color_manual(values = c('black', 'red', 'green')) + labs(x='Linear_Disc1', y=" ")
plot(lda_iris)
# For the sake of simplicity as to get the points easier to be understood,
#we'll start to illustrate the methods from the linear discriminant.
# We use iris data
data("iris")
View(iris)
iris = iris[,-c(2,4)]
iris$Species = as.factor(iris$Species)
iris$spec = c(rep(1, 50), rep(2,50))
library(dplyr)
iris$spec = c(rep(1, 50), rep(2,50), rep(3,50))
iris %>% ggplot(aes(Sepal.Length, Petal.Length), color = Species) + geom_point(alpha = 1.8, size = 2.5, col = iris$spec) +
scale_color_manual(values = c('black', 'red', 'green')) + labs(x='Feature_1', y="Feature_2")
library(ggplot2)
iris %>% ggplot(aes(Sepal.Length, Petal.Length), color = Species) + geom_point(alpha = 1.8, size = 2.5, col = iris$spec) +
scale_color_manual(values = c('black', 'red', 'green')) + labs(x='Feature_1', y="Feature_2")
iris[1:100,] %>% ggplot(aes(Sepal.Length, Petal.Length), color = Species) + geom_point(alpha = 1.8, size = 2.5, col = iris$spec) +
scale_color_manual(values = c('black', 'red', 'green')) + labs(x='Feature_1', y="Feature_2")
iris %>% ggplot(aes(Sepal.Length, Petal.Length), color = Species) + geom_point(alpha = 1.8, size = 2.5, col = iris$spec) +
scale_color_manual(values = c('black', 'red', 'green')) + labs(x='Feature_1', y="Feature_2")
#Try projecting the data into each feature
iris %>% ggplot(aes(Sepal.Length, 0), color = Species) + geom_point(alpha = 1.8, size = 2.5, col = iris$spec) +
scale_color_manual(values = c('black', 'red', 'green')) + labs(x='Feature_1', y="Feature_2")
# For the sake of simplicity as to get the points easier to be understood,
#we'll start to illustrate the methods from the linear discriminant.
# We use iris data
data("iris")
iris = iris[100,-c(2,4)]
iris$Species = as.factor(iris$Species)
iris$spec = c(rep(1, 50), rep(2,50))
# For the sake of simplicity as to get the points easier to be understood,
#we'll start to illustrate the methods from the linear discriminant.
# We use iris data
data("iris")
iris = iris[1:100,-c(2,4)]
iris$Species = as.factor(iris$Species)
iris$spec = c(rep(1, 50), rep(2,50))
iris %>% ggplot(aes(Sepal.Length, Petal.Length), color = Species) + geom_point(alpha = 1.8, size = 2.5, col = iris$spec) +
scale_color_manual(values = c('black', 'red', 'green')) + labs(x='Feature_1', y="Feature_2")
#Lets try classify 3 species on the iris data
data("iris")
iris = iris[,-c(2,4)]
iris$spec = c(rep(1, 50), rep(2,50), rep(3,50))
iris %>% ggplot(aes(Sepal.Length, Petal.Length), color = Species) + geom_point(alpha = 1.8, size = 2.5, col = iris$spec) +
scale_color_manual(values = c('black', 'red', 'green')) + labs(x='Feature_1', y="Feature_2")
lda_iris2 = lda(Species ~., data = iris[,-4] )
library(klaR)
library(psych)
library(MASS)
lda_iris2 = lda(Species ~., data = iris[,-4] )
lda_iris2$scaling #Parameter in the discriminant function
plot(lda_iris2)
iris = as.data.frame(cbind(iris, predict(lda_iris)$x))
View(iris)
iris = as.data.frame(cbind(iris, predict(lda_iris2)$x))
#Lets try classify 3 species on the iris data
data("iris")
iris = iris[,-c(2,4)]
iris$spec = c(rep(1, 50), rep(2,50), rep(3,50))
iris %>% ggplot(aes(Sepal.Length, Petal.Length), color = Species) + geom_point(alpha = 1.8, size = 2.5, col = iris$spec) +
scale_color_manual(values = c('black', 'red', 'green')) + labs(x='Feature_1', y="Feature_2")
lda_iris2 = lda(Species ~., data = iris[,-4] )
lda_iris2$scaling
iris = as.data.frame(cbind(iris, predict(lda_iris2)$x))
plot(lda_iris2)
lda_iris2 %>% ggplot(aes(LD1, LD2)) +
geom_point(aes(color = Species))
lda_iris2 %>% ggplot(aes(LD1, LD2)) + geom_point(alpha = 1.8, size = 2.5, col = iris$spec)
lda_iris2 %>% ggplot(aes(LD1, LD2), color = Species) + geom_point(alpha = 1.8, size = 2.5, col = iris$spec) +
scale_color_manual(values = c('black', 'red', 'green')) + labs(x='Feature_1', y="Feature_2")
iris %>% ggplot(aes(LD1, LD2), color = Species) + geom_point(alpha = 1.8, size = 2.5, col = iris$spec) +
scale_color_manual(values = c('black', 'red', 'green')) + labs(x='Feature_1', y="Feature_2")
iris %>% ggplot(aes(LD1, LD2), color = Species) + geom_point(alpha = 1.8, size = 2.5, col = iris$spec) +
scale_color_manual(values = c('black', 'red', 'green')) + labs(x='Linear_Disc1', y="Linear_Disc2")
pred = predict(lda_iris2, iris[,1:2])
ldahist(data = pred$x[,1])
ldahist(data = pred$x[,1], g = iris$spec)
partimat(Species ~. , data = iris[,1:3], method = "lda")
# Quadratic and Mixture DA
# Fit the model
qda_iris = qda(Species~., data = [,-c(4:6)])
# Quadratic and Mixture DA
# Fit the model
qda_iris = qda(Species~., data = iris[,-c(4:6)])
qda_iris$scaling
# Make predictions
pred = predict(qda_iris, iris[,1:2])
# Model accuracy
mean(pred$class == iris$Species)
pred = predict(lda_iris2, iris[,1:2])
mean(pred$class == iris$Species)
library(mda)
# Fit the model
mda_iris = mda(Species~., data = iris[,-c(4:6)])
install.packages("mda")
library(mda)
mda_iris$scaling
# Fit the model
mda_iris = mda(Species~., data = iris[,-c(4:6)])
mda_iris$scaling
mda_iris$
# Make predictions
predicted.classes <- model %>% predict(test.transformed)
mda_iris$values
mda_iris$confusion
pred = predict(mda_iris, iris[,1:2])
# Model accuracy
mean(predicted.classes == test.transformed$Species)
# Model accuracy
mean(pred == iris$Species)
# Make predictions
pred = predict(qda_iris, iris[,1:2])
ldahist(data = pred$x[,1], g = iris$spec)
pred$class
ldahist(data = pred$class, g = iris$Species)
ldahist(data = as.factor(pred$class), g = iris$Species)
pred = predict(lda_iris2, iris[,1:2])
pred$x[,1]
pred$x
# Make predictions
pred = predict(qda_iris, iris[,1:2])
pred$posterior
plot(qda_iris)
# Flexible DA
#Builds the discriminant function by combining non linear predictors such as splines.
#Good to model non-normality or non-linearity relationships among variables within each category
fda_iris = fda(Species~., data = iris[,-c(4:6)])
# Make predictions
pred = predict(fda_iris, iris[,1:2])
# Model accuracy
mean(pred == iris$Species)
# Regularized DA
#Classification rule by regularizing the group covariance matrices (Friedman 1989).
#Tackling multicollinearity problem.
#Can be seen as a trade-off between LDA and QDA, as in shrinking the separate covariance in QDA to incline more
#towards common variance as in LDA.
rda = rda(Species~., data = iris[,-c(4:6)])
rm(rda)
# Regularized DA
#Classification rule by regularizing the group covariance matrices (Friedman 1989).
#Tackling multicollinearity problem.
#Can be seen as a trade-off between LDA and QDA, as in shrinking the separate covariance in QDA to incline more
#towards common variance as in LDA.
rda_iris = rda(Species~., data = iris[,-c(4:6)])
# Make predictions
pred = predict(rda_iris, iris[,1:2])
mean(pred$class == iris$Species)
# LDA assumptions
library(MVN)
#Normality
mvn(iris[,1:2])
library(biotools)
#Homogeneity
boxM(iris[,1:2], iris$Species)
View(client_train)
View(client_train1)
# Fit model
#LDA
lda_client = lda(default.payment.next.month~., data = client_train1)
pred_client = predict(lda_client, client_train1[,1:12])
mean(pred_client$class == client_train1$default.payment.next.month)
#QDA
qda_client = qda(default.payment.next.month~., data = client_train1)
pred2_client = predict(qda_client, client_train1[,1:12])
mean(pred2_client$class == client_train1$default.payment.next.month)
#Separate train for accuracy test
set.seed(12345)
examples = client_train1$default.payment.next.month %>%
createDataPartition(p = 0.1, list = FALSE)
#Separate train for accuracy test
library(caret)
set.seed(12345)
examples = client_train1$default.payment.next.month %>%
createDataPartition(p = 0.1, list = FALSE)
client_train1.1  = client_train1[examples,]
client_train1.2 = client_train1[-examples,]
set.seed(12345)
examples = client_train1$default.payment.next.month %>%
createDataPartition(p = 0.25, list = FALSE)
client_train1.1  = client_train1[examples,]
client_train1.2 = client_train1[-examples,]
# Fit model
#LDA
lda_client = lda(default.payment.next.month~., data = client_train1.1)
pred_client = predict(lda_client, client_train1.2[,1:12])
mean(pred_client$class == client_train1$default.payment.next.month)
mean(pred_client$class == client_train1.2$default.payment.next.month)
#QDA
qda_client = qda(default.payment.next.month~., data = client_train1.1)
pred2_client = predict(qda_client, client_train1.2[,1:12])
mean(pred2_client$class == client_train1.2$default.payment.next.month)
#MDA
mda_client = mda(default.payment.next.month~., data = client_train1.1)
pred3_client = predict(mda_client, client_train1.2)
mean(pred3_client == client_train1.2$default.payment.next.month)
#FDA
fda_client = fda(default.payment.next.month~., data = client_train1.1)
pred4_client = predict(fda_client, client_train1.2)
mean(pred4_client == client_train1.2$default.payment.next.month)
#RDA
rda_client = rda(default.payment.next.month~., data = client_train1.1)
#RDA
rda_client = rda(default.payment.next.month~., data = client_train1.1)
pred5_client = predict(rda_client, client_train1.2)
mean(pred5_client$class == client_train1.2$default.payment.next.month)
# Assumptions
mvn(client_train1.1[,-13])
boxM(client_train1.1[,-13], client_train1.1$default.payment.next.month)
# Summary for accuracy
summarise(accuracy_LDA = mean(pred_client$class == client_train1.2$default.payment.next.month))
# Summary for accuracy
summarize(accuracy_LDA = mean(pred_client$class == client_train1.2$default.payment.next.month))
# Summary for accuracy
DA_accuracy = cbind(mean(pred_client$class == client_train1.2$default.payment.next.month),
mean(pred2_client$class == client_train1.2$default.payment.next.month),
mean(pred3_client$class == client_train1.2$default.payment.next.month),
mean(pred4_client$class == client_train1.2$default.payment.next.month),
mean(pred5_client$class == client_train1.2$default.payment.next.month))
# Summary for accuracy
DA_accuracy = c(mean(pred_client$class == client_train1.2$default.payment.next.month),
mean(pred2_client$class == client_train1.2$default.payment.next.month),
mean(pred3_client$class == client_train1.2$default.payment.next.month),
mean(pred4_client$class == client_train1.2$default.payment.next.month),
mean(pred5_client$class == client_train1.2$default.payment.next.month))
# Summary for accuracy
DA_accuracy = as.array(mean(pred_client$class == client_train1.2$default.payment.next.month),
mean(pred2_client$class == client_train1.2$default.payment.next.month),
mean(pred3_client$class == client_train1.2$default.payment.next.month),
mean(pred4_client$class == client_train1.2$default.payment.next.month),
mean(pred5_client$class == client_train1.2$default.payment.next.month))
# Summary for accuracy
DA_accuracy = as.numeric(mean(pred_client$class == client_train1.2$default.payment.next.month),
mean(pred2_client$class == client_train1.2$default.payment.next.month),
mean(pred3_client$class == client_train1.2$default.payment.next.month),
mean(pred4_client$class == client_train1.2$default.payment.next.month),
mean(pred5_client$class == client_train1.2$default.payment.next.month))
# Summary for accuracy
DA_accuracy = as.array(mean(pred_client$class == client_train1.2$default.payment.next.month),
mean(pred2_client$class == client_train1.2$default.payment.next.month),
mean(pred3_client$class == client_train1.2$default.payment.next.month),
mean(pred4_client$class == client_train1.2$default.payment.next.month),
mean(pred5_client$class == client_train1.2$default.payment.next.month))
names(DA_accuracy) = c("LDA", "QDA", "MDA", "FDA", "RDA")
length(DA_accuracy)
DA_accuracy
# Summary for accuracy
DA_accuracy = as.array(mean(pred_client$class == client_train1.2$default.payment.next.month),
mean(pred2_client$class == client_train1.2$default.payment.next.month),
mean(pred3_client$class == client_train1.2$default.payment.next.month),
mean(pred4_client$class == client_train1.2$default.payment.next.month),
mean(pred5_client$class == client_train1.2$default.payment.next.month))
# Summary for accuracy
DA_accuracy = as.vector(mean(pred_client$class == client_train1.2$default.payment.next.month),
mean(pred2_client$class == client_train1.2$default.payment.next.month),
mean(pred3_client$class == client_train1.2$default.payment.next.month),
mean(pred4_client$class == client_train1.2$default.payment.next.month),
mean(pred5_client$class == client_train1.2$default.payment.next.month))
# Summary for accuracy
DA_accuracy = as.array(mean(pred_client$class == client_train1.2$default.payment.next.month),
mean(pred2_client$class == client_train1.2$default.payment.next.month),
mean(pred3_client$class == client_train1.2$default.payment.next.month),
mean(pred4_client$class == client_train1.2$default.payment.next.month),
mean(pred5_client$class == client_train1.2$default.payment.next.month))
# Summary for accuracy
DA_accuracy = as.array(mean(pred_client$class == client_train1.2$default.payment.next.month))
DA_accuracy+  as.array(mean(pred2_client$class == client_train1.2$default.payment.next.month))
# Summary for accuracy
DA_accuracy = as.data.frame(mean(pred_client$class == client_train1.2$default.payment.next.month),
mean(pred2_client$class == client_train1.2$default.payment.next.month),
mean(pred3_client$class == client_train1.2$default.payment.next.month),
mean(pred4_client$class == client_train1.2$default.payment.next.month),
mean(pred5_client$class == client_train1.2$default.payment.next.month))
lda_acc = mean(pred_client$class == client_train1.2$default.payment.next.month)
qda_acc = mean(pred2_client$class == client_train1.2$default.payment.next.month)
mda_acc = mean(pred3_client == client_train1.2$default.payment.next.month)
fda_acc = mean(pred4_client == client_train1.2$default.payment.next.month)
rda_acc = mean(pred5_client$class == client_train1.2$default.payment.next.month)
# Summary for accuracy
DA_accuracy = as.data.frame(c(lda_acc, qda_acc, mda_acc, fda_acc, rda_acc))
colnames(DA_accuracy) = c("LDA", "QDA", "MDA", "FDA", "RDA")
View(DA_accuracy)
# Summary for accuracy
DA_accuracy = as.data.frame(cbind(lda_acc, qda_acc, mda_acc, fda_acc, rda_acc))
View(DA_accuracy)
colnames(DA_accuracy) = c("LDA", "QDA", "MDA", "FDA", "RDA")
row.names(DA_accuracy) = c("Accuracy")
#From the accuracy and assumptions test, FDA and RDA seems to be the better models compared to the rest
fda_client$confusion
#From the accuracy and assumptions test, FDA and RDA seems to be the better models compared to the rest
sensitivity(fda_client$confusion)
specificity(fda_client$confusion)
#FDA
fda_client = fda(default.payment.next.month~., data = client_train1.1, method = mars)
pred4_client = predict(fda_client, client_train1.2)
fda_acc = mean(pred4_client == client_train1.2$default.payment.next.month)
#From the accuracy and assumptions test, FDA and RDA seems to be the better models compared to the rest
sensitivity(fda_client$confusion)
specificity(fda_client$confusion)
#FDA
fda_client = fda(default.payment.next.month~., data = client_train1.1, method = mars, keep.fitted = TRUE)
pred4_client = predict(fda_client, client_train1.2)
fda_acc = mean(pred4_client == client_train1.2$default.payment.next.month)
# Summary for accuracy
DA_accuracy = as.data.frame(cbind(lda_acc, qda_acc, mda_acc, fda_acc, rda_acc))
colnames(DA_accuracy) = c("LDA", "QDA", "MDA", "FDA", "RDA")
row.names(DA_accuracy) = c("Accuracy")
fda_client$fit$fitted.values
head(fda_client$fit$fitted.values,100)
fda_client$percent.explained[2]/100
fda_client$percent.explained[2]
fda_client$percent.explained
fda_client$fit$fitted.values %>%
as_tibble() %>%
bind_cols("Payment status" = client_train1.1$default.payment.next.month) %>%
ggplot() +
geom_point(aes(V1, V2, color = client_train1.1$default.payment.next.month+1, shape = client_train1.1$default.payment.next.month+1), size = 2.5) +
labs(x = paste("FDA1 (", percent(fda_client$percent.explained[1]/100), ")", sep=""),
y = " " )
client_train1.1$fitted_fda = fda_client$fit$fitted.values
View(client_train1.1)
client_train1.1 %>% ggplot(aes(x = fitted_fda, y = 0), color = default.payment.next.month+1) +
geom_point(alpha = 1.8, size = 2.5, col = client_train1.1$default.payment.next.month) +
scale_color_manual(values = c('black', 'red', 'green')) + labs(x='Flex_Disc1', y=" ")
client_train1.1 %>% ggplot(aes(x = fitted_fda, y = 0), color = default.payment.next.month+1) +
geom_point(alpha = 1.8, size = 2.5, col = client_train1.1$default.payment.next.month+1) +
scale_color_manual(values = c('black', 'red', 'green')) + labs(x='Flex_Disc1', y=" ")
#From the accuracy and assumptions test, FDA and RDA seems to be the better models compared to the rest
fda_client$confusion
specificity(fda_client$confusion)
library(ggord)
ggord(lda_iris2, iris$Species)
ggord(lda_iris2, iris$Species, coord_fix = FALSE)
ggord(lda_iris2, iris$Species, poly = FALSE)
ggord(lda_iris2, iris$Species, poly = FALSE, arrow = NULL)
ggord(lda_iris2, iris$Species, poly = FALSE, arrow = NULL, parse = FALSE)
ggord(lda_iris2, iris$Species, poly = FALSE, arrow = NULL, parse = FALSE, facet = FALSE)
ggord(lda_iris2, iris$Species, ellipse = FALSE)
ggord(lda_iris2, iris$Species, ellipse = FALSE, axes = NULL)
ggord(lda_iris2, iris$Species, ellipse = FALSE, axes = 1)
ggord(lda_iris2, iris$Species, ellipse = FALSE, axes = c("1"))
ggord(lda_iris2, iris$Species, ellipse = FALSE, axes = c("1"."2"))
ggord(lda_iris2, iris$Species, ellipse = FALSE, axes = c("1","2"))
ggord(lda_iris2, iris$Species, ellipse = FALSE, axes = FALSE)
ggord(lda_iris2, iris$Species)
#From the accuracy and assumptions test, FDA and RDA seems to be the better models compared to the rest
fda_client
#From the accuracy and assumptions test, FDA and RDA seems to be the better models compared to the rest
summary(fda_client)
#From the accuracy and assumptions test, FDA and RDA seems to be the better models compared to the rest
performance(fda_client)

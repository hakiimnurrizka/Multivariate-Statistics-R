null.rejection.proportion = sum(reject.null)/h))
}
simulate.mvn(100, 500)
simulate.mvn = function(n,h){
library(MASS)
z2.stats = rep(NA, h)
reject.null = rep(NA, h)
for(i in 1:h){
size = n*3
mu1 = c(0, 12, 7)
sigma1 = matrix(c(0.65, 0.59, 0.22, 0.59, 2.71, 0.56, 0.22, 0.56, 0.24), byrow = T, ncol = 3)
simulated = matrix(rep(NA, size), ncol = 3)
for(j in 1:n){
simulated[j,] = mvrnorm(1, mu = mu1, Sigma = sigma1)
}
mean.sim = apply(simulated, 2, mean)
cov.sim = cov(simulated)
mu.null = c(0, 11.8, 7.2)
z.2 = as.numeric(n*t(mean.sim-mu.null)%*%solve(sigma1)%*%(mean.sim-mu.null))
z2.stats[i] = z.2
p.z2 = pchisq(z.2, 3, lower.tail = F)
reject.null[i] = ifelse(p.z2<0.05, 1, 0)
}
return(list(output.statistics = data.frame(statistics.z2 = z2.stats, reject.null),
null.rejection.proportion = sum(reject.null)/h))
}
simulate.mvn(100, 500)
simulate.mvn = function(n,h){
library(MASS)
z2.stats = rep(NA, h)
reject.null = rep(NA, h)
for(i in 1:h){
size = n*3
mu1 = c(0, 12, 7)
sigma1 = matrix(c(0.65, 0.59, 0.22, 0.59, 2.71, 0.56, 0.22, 0.56, 0.24), byrow = T, ncol = 3)
simulated = matrix(rep(NA, size), ncol = 3)
for(j in 1:n){
simulated[j,] = mvrnorm(1, mu = mu1, Sigma = sigma1)
}
mean.sim = apply(simulated, 2, mean)
cov.sim = cov(simulated)
mu.null = c(0, 12, 7.01)
z.2 = as.numeric(n*t(mean.sim-mu.null)%*%solve(sigma1)%*%(mean.sim-mu.null))
z2.stats[i] = z.2
p.z2 = pchisq(z.2, 3, lower.tail = F)
reject.null[i] = ifelse(p.z2<0.05, 1, 0)
}
return(list(output.statistics = data.frame(statistics.z2 = z2.stats, reject.null),
null.rejection.proportion = sum(reject.null)/h))
}
simulate.mvn(100, 500)
simulate.mvn = function(n,h){
library(MASS)
z2.stats = rep(NA, h)
reject.null = rep(NA, h)
for(i in 1:h){
size = n*3
mu1 = c(0, 12, 7)
sigma1 = matrix(c(0.65, 0.59, 0.22, 0.59, 2.71, 0.56, 0.22, 0.56, 0.24), byrow = T, ncol = 3)
simulated = matrix(rep(NA, size), ncol = 3)
for(j in 1:n){
simulated[j,] = mvrnorm(1, mu = mu1, Sigma = sigma1)
}
mean.sim = apply(simulated, 2, mean)
cov.sim = cov(simulated)
mu.null = c(0, 11.9, 7.01)
z.2 = as.numeric(n*t(mean.sim-mu.null)%*%solve(sigma1)%*%(mean.sim-mu.null))
z2.stats[i] = z.2
p.z2 = pchisq(z.2, 3, lower.tail = F)
reject.null[i] = ifelse(p.z2<0.05, 1, 0)
}
return(list(output.statistics = data.frame(statistics.z2 = z2.stats, reject.null),
null.rejection.proportion = sum(reject.null)/h))
}
simulate.mvn(100, 500)
simulate.mvn = function(n,h){
library(MASS)
z2.stats = rep(NA, h)
reject.null = rep(NA, h)
for(i in 1:h){
size = n*3
mu1 = c(0, 12, 7)
sigma1 = matrix(c(0.65, 0.59, 0.22, 0.59, 2.71, 0.56, 0.22, 0.56, 0.24), byrow = T, ncol = 3)
simulated = matrix(rep(NA, size), ncol = 3)
for(j in 1:n){
simulated[j,] = mvrnorm(1, mu = mu1, Sigma = sigma1)
}
mean.sim = apply(simulated, 2, mean)
cov.sim = cov(simulated)
mu.null = c(0, 11.9, 7.1)
z.2 = as.numeric(n*t(mean.sim-mu.null)%*%solve(sigma1)%*%(mean.sim-mu.null))
z2.stats[i] = z.2
p.z2 = pchisq(z.2, 3, lower.tail = F)
reject.null[i] = ifelse(p.z2<0.05, 1, 0)
}
return(list(output.statistics = data.frame(statistics.z2 = z2.stats, reject.null),
null.rejection.proportion = sum(reject.null)/h))
}
simulate.mvn(100, 500)
simulate.mvn = function(n,h){
library(MASS)
z2.stats = rep(NA, h)
reject.null = rep(NA, h)
for(i in 1:h){
size = n*3
mu1 = c(0, 12, 7)
sigma1 = matrix(c(0.65, 0.59, 0.22, 0.59, 2.71, 0.56, 0.22, 0.56, 0.24), byrow = T, ncol = 3)
simulated = matrix(rep(NA, size), ncol = 3)
for(j in 1:n){
simulated[j,] = mvrnorm(1, mu = mu1, Sigma = sigma1)
}
mean.sim = apply(simulated, 2, mean)
cov.sim = cov(simulated)
mu.null = c(0.05, 11.92, 7.07)
z.2 = as.numeric(n*t(mean.sim-mu.null)%*%solve(sigma1)%*%(mean.sim-mu.null))
z2.stats[i] = z.2
p.z2 = pchisq(z.2, 3, lower.tail = F)
reject.null[i] = ifelse(p.z2<0.05, 1, 0)
}
return(list(output.statistics = data.frame(statistics.z2 = z2.stats, reject.null),
null.rejection.proportion = sum(reject.null)/h))
}
simulate.mvn(100, 500)
set.seed(1706047391)
simulate.mvn(100, 500)
##Testing when the covariance matrix is known
#similar to univariate case, lets start with testing means when the covariance is known.
#simulate the samples
meanvect = c(13,5,1250)
cov_m = matrix(c(124,123,47,
123,203,162,
47,162,3257), ncol = 3)
library(MASS)
#define a function to sample from a MN dist
set.seed(123)
gen.data = function(mu, sigma, n) {
require(MASS)
dt = mvrnorm(n, mu=mu, Sigma=sigma) #samples
meandt = mean(dt)
return(dt)
}
gen.samples = gen.data(meanvect, cov_m, 300)
colnames(gen.samples) = c("v1", "v2", "v3")
#Testing for one sample
#Lets test the generated sample gen.samples with the null hypothesis mu* = mu = c(10,5,1200)
#Known covariance matrix (we use the covariance of the previous normal distribution)
n = dim(gen.samples)[1]
mu.sam = apply(gen.samples, 2, mean)
mu = c(10, 5, 1200)
HotellingsT2Test(gen.samples, mu = mu, cov(gen.samples), test = "f")
library(RVAideMemoire)
HotellingsT2Test(gen.samples, mu = mu, cov(gen.samples), test = "f")
library(MVN)
library(DescTools)
HotellingsT2Test(gen.samples, mu = mu, cov(gen.samples), test = "f")
simulate.mvn2 = function(n,h){
library(MASS)
z2.stats = rep(NA, h)
reject.null = rep(NA, h)
for(i in 1:h){
size = n*3
mu1 = c(0, 12, 7)
sigma1 = matrix(c(0.65, 0.59, 0.22, 0.59, 2.71, 0.56, 0.22, 0.56, 0.24), byrow = T, ncol = 3)
simulated = matrix(rep(NA, size), ncol = 3)
for(j in 1:n){
simulated[j,] = mvrnorm(1, mu = mu1, Sigma = sigma1)
}
mean.sim = apply(simulated, 2, mean)
cov.sim = cov(simulated)
mu.null = c(0.05, 11.92, 7.07)
t.2 = as.numeric(n*t(mean.sim-mu.null)%*%solve(cov.sim)%*%(mean.sim-mu.null))
f.eq = t.2*(n-3)/((n-1)*3)
f.stats[i] = f.eq
p.f = pf(f.eq, 3, (n-3), lower.tail = F)
reject.null[i] = ifelse(p.f<0.05, 1, 0)
}
return(list(output.statistics = data.frame(statistics.z2 = z2.stats, reject.null),
null.rejection.proportion = sum(reject.null)/h))
}
simulate.mvn2(300, 1000)
simulate.mvn2 = function(n,h){
library(MASS)
f.stats = rep(NA, h)
reject.null = rep(NA, h)
for(i in 1:h){
size = n*3
mu1 = c(0, 12, 7)
sigma1 = matrix(c(0.65, 0.59, 0.22, 0.59, 2.71, 0.56, 0.22, 0.56, 0.24), byrow = T, ncol = 3)
simulated = matrix(rep(NA, size), ncol = 3)
for(j in 1:n){
simulated[j,] = mvrnorm(1, mu = mu1, Sigma = sigma1)
}
mean.sim = apply(simulated, 2, mean)
cov.sim = cov(simulated)
mu.null = c(0.05, 11.92, 7.07)
t.2 = as.numeric(n*t(mean.sim-mu.null)%*%solve(cov.sim)%*%(mean.sim-mu.null))
f.eq = t.2*(n-3)/((n-1)*3)
f.stats[i] = f.eq
p.f = pf(f.eq, 3, (n-3), lower.tail = F)
reject.null[i] = ifelse(p.f<0.05, 1, 0)
}
return(list(output.statistics = data.frame(statistics.z2 = z2.stats, reject.null),
null.rejection.proportion = sum(reject.null)/h))
}
simulate.mvn2(300, 1000)
simulate.mvn2 = function(n,h){
library(MASS)
f.stats = rep(NA, h)
reject.null = rep(NA, h)
for(i in 1:h){
size = n*3
mu1 = c(0, 12, 7)
sigma1 = matrix(c(0.65, 0.59, 0.22, 0.59, 2.71, 0.56, 0.22, 0.56, 0.24), byrow = T, ncol = 3)
simulated = matrix(rep(NA, size), ncol = 3)
for(j in 1:n){
simulated[j,] = mvrnorm(1, mu = mu1, Sigma = sigma1)
}
mean.sim = apply(simulated, 2, mean)
cov.sim = cov(simulated)
mu.null = c(0.05, 11.92, 7.07)
t.2 = as.numeric(n*t(mean.sim-mu.null)%*%solve(cov.sim)%*%(mean.sim-mu.null))
f.eq = t.2*(n-3)/((n-1)*3)
f.stats[i] = f.eq
p.f = pf(f.eq, 3, (n-3), lower.tail = F)
reject.null[i] = ifelse(p.f<0.05, 1, 0)
}
return(list(output.statistics = data.frame(statistics.f = f.stats, reject.null),
null.rejection.proportion = sum(reject.null)/h))
}
simulate.mvn2(300, 1000)
simulate.mvn = function(n,h){
library(MASS)
z2.stats = rep(NA, h)
reject.null = rep(NA, h)
for(i in 1:h){
size = n*3
mu1 = c(0, 12, 7)
sigma1 = matrix(c(0.65, 0.59, 0.22, 0.59, 2.71, 0.56, 0.22, 0.56, 0.24), byrow = T, ncol = 3)
simulated = matrix(rep(NA, size), ncol = 3)
for(j in 1:n){
simulated[j,] = mvrnorm(1, mu = mu1, Sigma = sigma1)
}
mean.sim = apply(simulated, 2, mean)
cov.sim = cov(simulated)
mu.null = c(0.2, 11.94, 7.07)
z.2 = as.numeric(n*t(mean.sim-mu.null)%*%solve(sigma1)%*%(mean.sim-mu.null))
z2.stats[i] = z.2
p.z2 = pchisq(z.2, 3, lower.tail = F)
reject.null[i] = ifelse(p.z2<0.05, 1, 0)
}
return(list(output.statistics = data.frame(statistics.z2 = z2.stats, reject.null),
null.rejection.proportion = sum(reject.null)/h))
}
set.seed(1706047391)
simulate.mvn(100, 500)
simulate.mvn = function(n,h){
library(MASS)
z2.stats = rep(NA, h)
reject.null = rep(NA, h)
for(i in 1:h){
size = n*3
mu1 = c(0, 12, 7)
sigma1 = matrix(c(0.65, 0.59, 0.22, 0.59, 2.71, 0.56, 0.22, 0.56, 0.24), byrow = T, ncol = 3)
simulated = matrix(rep(NA, size), ncol = 3)
for(j in 1:n){
simulated[j,] = mvrnorm(1, mu = mu1, Sigma = sigma1)
}
mean.sim = apply(simulated, 2, mean)
cov.sim = cov(simulated)
mu.null = c(0.02, 11.94, 7.07)
z.2 = as.numeric(n*t(mean.sim-mu.null)%*%solve(sigma1)%*%(mean.sim-mu.null))
z2.stats[i] = z.2
p.z2 = pchisq(z.2, 3, lower.tail = F)
reject.null[i] = ifelse(p.z2<0.05, 1, 0)
}
return(list(output.statistics = data.frame(statistics.z2 = z2.stats, reject.null),
null.rejection.proportion = sum(reject.null)/h))
}
set.seed(1706047391)
simulate.mvn(100, 500)
simulate.mvn = function(n,h){
library(MASS)
z2.stats = rep(NA, h)
reject.null = rep(NA, h)
for(i in 1:h){
size = n*3
mu1 = c(0, 12, 7)
sigma1 = matrix(c(0.65, 0.59, 0.22, 0.59, 2.71, 0.56, 0.22, 0.56, 0.24), byrow = T, ncol = 3)
simulated = matrix(rep(NA, size), ncol = 3)
for(j in 1:n){
simulated[j,] = mvrnorm(1, mu = mu1, Sigma = sigma1)
}
mean.sim = apply(simulated, 2, mean)
cov.sim = cov(simulated)
mu.null = c(0.02, 11.95, 7.04)
z.2 = as.numeric(n*t(mean.sim-mu.null)%*%solve(sigma1)%*%(mean.sim-mu.null))
z2.stats[i] = z.2
p.z2 = pchisq(z.2, 3, lower.tail = F)
reject.null[i] = ifelse(p.z2<0.05, 1, 0)
}
return(list(output.statistics = data.frame(statistics.z2 = z2.stats, reject.null),
null.rejection.proportion = sum(reject.null)/h))
}
set.seed(1706047391)
simulate.mvn(100, 500)
simulate.mvn2 = function(n,h){
library(MASS)
f.stats = rep(NA, h)
reject.null = rep(NA, h)
for(i in 1:h){
size = n*3
mu1 = c(0, 12, 7)
sigma1 = matrix(c(0.65, 0.59, 0.22, 0.59, 2.71, 0.56, 0.22, 0.56, 0.24), byrow = T, ncol = 3)
simulated = matrix(rep(NA, size), ncol = 3)
for(j in 1:n){
simulated[j,] = mvrnorm(1, mu = mu1, Sigma = sigma1)
}
mean.sim = apply(simulated, 2, mean)
cov.sim = cov(simulated)
mu.null = c(0.02, 11.95, 7.04)
t.2 = as.numeric(n*t(mean.sim-mu.null)%*%solve(cov.sim)%*%(mean.sim-mu.null))
f.eq = t.2*(n-3)/((n-1)*3)
f.stats[i] = f.eq
p.f = pf(f.eq, 3, (n-3), lower.tail = F)
reject.null[i] = ifelse(p.f<0.05, 1, 0)
}
return(list(output.statistics = data.frame(statistics.f = f.stats, reject.null),
null.rejection.proportion = sum(reject.null)/h))
}
set.seed(1706047391)
simulate.mvn2(300, 1000)
###Multivariate test on two mean vectors
##analogous on testing mean of two sample on univariate case
library(tibble)
library(readr)
library(plotly)
library(DT)
library(mvnormtest)
library(dplyr)
library(ICSNP)
library(Matrix)
library(Hotelling)
#Data
data("iris")
iris = iris[1:100,]
View(iris)
#Plot data each variable
box_sepal.l = plot_ly(iris,
type = "box") %>%
add_boxplot(y = ~Sepal.Length,
x = ~Species,
name = "Sepal_l") %>%
layout(title = "Sepal Length",
xaxis = list(title = "Species"),
yaxis = list(title = "Sepal Length"))
box_sepal.l
box_sepal.w = plot_ly(iris,
type = "box") %>%
add_boxplot(y = ~Sepal.Width,
x = ~Species,
name = "Sepal_w") %>%
layout(title = "Sepal Width",
xaxis = list(title = "Species"),
yaxis = list(title = "Sepal Width"))
box_sepal.w
box_petal.l = plot_ly(iris,
type = "box") %>%
add_boxplot(y = ~Petal.Length,
x = ~Species,
name = "Petal_l") %>%
layout(title = "Petal Length",
xaxis = list(title = "Species"),
yaxis = list(title = "Petal Length"))
box_petal.l
box_petal.w = plot_ly(iris,
type = "box") %>%
add_boxplot(y = ~Petal.Width,
x = ~Species,
name = "Petal_w") %>%
layout(title = "Petal Width",
xaxis = list(title = "Species"),
yaxis = list(title = "Petal Width"))
box_petal.w
#Mean for each species
kekw = iris %>% group_by(Species)%>%
summarize(mean_sepal_l = mean(Sepal.Length),
mean_sepal_w = mean(Sepal.Width),
mean_petal_l = mean(Petal.Length),
mean_petal_w = mean(Petal.Width))
kekw
#Assumption
mshapiro.test(t(iris[,1:4]))
det(cov(iris[,1:4])) #positive determinant
chol(cov(iris[,1:4])) #positive definite
#Statistic test
iris_set = filter(iris, Species == "setosa")[,1:4]
iris_vers = filter(iris, Species == "versicolor")[,1:4]
y1bar = apply(iris_set,2,mean)
y2bar = apply(iris_vers,2,mean)
n1 = dim(iris_set)[1]
n2 = dim(iris_vers)[1]
w1 = (n1-1)*cov(iris_set)
w2 = (n2-1)*cov(iris_vers)
spl = (1/(n1+n2-2))*(w1+w2)
t2 = (n1*n2/(n1+n2))*t(y1bar-y2bar)%*%solve(spl)%*%(y1bar-y2bar)
p = dim(iris_set)[2]
f = (n1+n2-p-1)/((n1+n2-2)*p)*t2
f
HotellingsT2(iris_set, iris_vers)
pf(f, 4, 95, lower.tail = F)
HotellingsT2(iris_set, iris_vers)
#hotellingsT2 statistics is already converting into F statistics
#Based on the above test, it is concluded that null hypothesis of equal mean population is rejected.
#When the null on hypothesis test of difference between 2 mean vectors is rejected,  we can proceed to
#test individually each variable using univariate test.
t.test(iris_set$Sepal.Length, iris_vers$Sepal.Length)
t.test(iris_set$Sepal.Width, iris_vers$Sepal.Width)
t.test(iris_set$Petal.Length, iris_vers$Petal.Length)
t.test(iris_set$Petal.Width, iris_vers$Petal.Width)
#2
set.seed(1706047391)
simulate.mvn(100, 500)
set.seed(1706047391)
simulate.mvn2(300, 1000)
#5
read.csv("satisfaction.csv")
#5
read.csv("satisfaction.csv")
#5
satis = read.csv("satisfaction.csv")
v.mean = apply(satis, 2, mean)
cov.sat = cov(satis)
#6
n = dim(satis)[1]
View(satis)
mu.sam = apply(satis[,-2:3], 2, mean)
mu.sam = apply(satis[,c(1,4)], 2, mean)
mu = c(70, 2.3)
z.2 = n*t(mu.sam-mu)%*%solve(cov_m)%*%(mu.sam-mu)
cov_m = cov(satis[,c(1,4)])
z.2 = n*t(mu.sam-mu)%*%solve(cov_m)%*%(mu.sam-mu)
p.z2 = pchisq(z.2, 3, lower.tail = F) #Z2 is distributed as chisq(p), p : degree of freedom if null is true
p.z2
mu.sam
#7
library(corrplot)
corrplot(satis)
corrplot(cor(satis))
corrplot(cor(satis), type = "upper")
cor.test(Satisfaction, Severity, data = satis)
cor.test(satis$Satisfaction, satis$Severity)
cor(satis)
#8
n = dim(satis)[1]
mu.sam = apply(satis, 2, mean)
mu = c(70, 42, 43, 2.3)
cov_m = cov(satis)
z.2 = n*t(mu.sam-mu)%*%solve(cov_m)%*%(mu.sam-mu)
p.z2 = pchisq(z.2, 3, lower.tail = F) #Z2 is distributed as chisq(p), p : degree of freedom if null is true
p.z2
mu.sam
#2
set.seed(1706047391)
simulate.mvn(100, 500)#21.2% of the total resampling are found to be rejecting the null hypothesis
simulate.mvn(100, 500)#21.2% of the total resampling are found to be rejecting the null hypothesis
simulate.mvn(100, 500)#21.2% of the total resampling are found to be rejecting the null hypothesis
simulate.mvn(100, 500)#21.2% of the total resampling are found to be rejecting the null hypothesis
set.seed(1706047391)
simulate.mvn2(300, 1000)#51.3% of the total resampling are found to be rejecting the null hypothesis
###Multivariate test on two mean vectors
##analogous on testing mean of two sample on univariate case
library(tibble)
library(readr)
library(plotly)
library(DT)
library(mvnormtest)
library(dplyr)
library(ICSNP)
library(Matrix)
library(Hotelling)
box_sepal.l
box_sepal.w
box_petal.l
box_petal.w
kekw
#Assumption
mshapiro.test(t(iris[,1:4]))
det(cov(iris[,1:4])) #positive determinant
chol(cov(iris[,1:4])) #positive definite
HotellingsT2(iris_set, iris_vers)
View(iris_set)
View(iris_vers)
View(iris)
data("iris")
attach(iris)
View(iris)
###manova###
###one way
##test statistics
#test with manova, when the null hypothesis is accepted, proceed with anova
man.iris = manova(cbind(Sepal.Width, Sepal.Length, Petal.Length) ~ Species)
lm1.iris = lm(Sepal.Width ~ Species)
anova1 = anova(lm1.iris)
anova1
lm2.iris = lm(Sepal.Length ~ Species)
anova2 = anova(lm2.iris)
anova2
summary(man.iris)
lm3.iris = lm(Petal.Length ~ Species)
anova3 = anova(lm3.iris)
anova3
summary(man.iris)

hello this is some codes related to introduction to multivariate statistics course
"hello this is some codes related to introduction to multivariate statistics course"
data = bfi
library(psych)
data = bfi
view(bfi)
head(bfi)
head(data)
name(data) = "bfi"
bfi = data
rm(data)
rm(bfi)
bfi
###factor analysis
library(psych)
data(bfi)
bfi
fa(bfi, nfactors = 4, missing = TRUE)
library(corrplot)
library(ggplot2)
library(car)
cricket = read.csv("https://raw.githubusercontent.com/housecricket/data/main/efa/sample1.csv")
describe(cricket)
dim(cricket)
head(cricket)
cricket1 = cricket[,-1]
cricket[,c(-13)]
cricket1[,c(-13)]
cricket1
cricket1[,c(-13)]==cricket1[,-13]
all.equal(cricket1[,-13],cricket1[,c(-13)])
identical(cricket1[,-13],cricket1[,c(-13)])
matcrick = cor(cricket1[,-13])
corrplot(matcrick, method = "number")
#kaiser-meyer-olkin measure of sampling adequacy
#(to determine whether factor analysis will be useful or not)
KMO(matcrick)
cortest.bartlett(matcrick)
cortest.bartlett(matcrick)
det(cor(matcrick))
fa_crick = fa(cricket1, nfactors = ncol(cricket1), rotate = none)
fa_crick = fa(cricket1, nfactors = ncol(cricket1), rotate = "none")
cricket2 = cricket1[,-13]
#kaiser-meyer-olkin measure of sampling adequacy
#(to determine whether factor analysis will be useful or not)
# from kaiser(1974)
#0.00 to 0.49 unacceptable.
#0.50 to 0.59 miserable.
#0.60 to 0.69 mediocre.
#0.70 to 0.79 middling.
#0.80 to 0.89 meritorious.
#0.90 to 1.00 marvelous.
KMO(cricket2)
cortest.bartlett(cricket2)
det(cor(cricket2))
fa_crick = fa(cricket1, nfactors = ncol(cricket2), rotate = "none")
n_fa = length(fa_crick$e.values)
scree_fa = data.frame(
factor_n = as.factor(1:n_fa),
eigenvalues = fa_crick
)
scree_fa = data.frame(
factor_n = as.factor(1:n_fa),
eigenvalues = fa_crick$e.values
)
ggplot(scree, aes(x = factor_n, y = eigevalues, group = 1))+
geom_point()+geom_line()+xlab("number of factors")+ylab("initial eigenvalue")+
labs(title = "scree plot", subtitle = "(based on unreduced corralation matrix)")
ggplot(scree_fa, aes(x = factor_n, y = eigevalues, group = 1))+
geom_point()+geom_line()+xlab("number of factors")+ylab("initial eigenvalue")+
labs(title = "scree plot", subtitle = "(based on unreduced corralation matrix)")
ggplot(scree_fa, aes(x = factor_n, y = eigenvalues, group = 1))+
geom_point()+geom_line()+xlab("number of factors")+ylab("initial eigenvalue")+
labs(title = "scree plot", subtitle = "(based on unreduced corralation matrix)")
install.packages("nFactors")
library(nFactors)
fa.parallel(cricket2)
#factor analysis using fa
fa(r = cricket2, nfactors = 4, covar = FALSE, SMC = TRUE,
fm = "pa", max.iter = 100, rotate = "varimax")
#using factanal
factanal(cricket2, factors = 4, rotation ="varimax", scores = c("regression"))
#factor analysis using fa
fa_cricket =  fa(r = cricket2, nfactors = 4, covar = FALSE, SMC = TRUE,
fm = "pa", max.iter = 100, rotate = "varimax")
fa.diagram(fa_cricket)
fa_cricket$scores
head(fa_cricket$scores)
fa_none = fa(r = cricket2, nfactors = 4, covar = FALSE, SMC = TRUE,
fm = "pa", rotate = "varimax")
head(fa_none$scores)
fa_none = fa(r = cricket2, nfactors = 4, covar = FALSE, SMC = TRUE,
fm = "pa", rotate = "none")
head(fa_none$scores)
fa_none = fa(r = cricket2, nfactors = 4, covar = FALSE, SMC = TRUE,
fm = "pa", rotate = "none")
head(fa_none$scores)
fm = "pa", rotate = "varimin)
fa_none = fa(r = cricket2, nfactors = 4, covar = FALSE, SMC = TRUE,
fm = "pa", rotate = "varimin")
head(fa_none$scores)
fa_none = fa(r = cricket2, nfactors = 4, covar = FALSE, SMC = TRUE,
fm = "pa", rotate = "varimax")
head(fa_none$scores)
set.seed(123)
fa_none = fa(r = cricket2, nfactors = 4, covar = FALSE, SMC = TRUE,
fm = "pa", rotate = "varimax")
head(fa_none$scores)
head(fa_crick$scores)
head(fa_cricket$scores)
rm(fa_none)
cbind(cricket$QD, fa_cricket$scores)
reg.data = cbind(cricket$QD, fa_cricket$scores)
indice = sample(1:nrow(reg.data),0.7*nrow(reg.data))
reg.train = reg.data[indice,]
reg.test = reg.data[-indice,]
set.seed(123)
indice = sample(1:nrow(reg.data),0.7*nrow(reg.data))
reg.train = reg.data[indice,]
reg.test = reg.data[-indice,]
reg_fac = lm(QD~.,reg.train)
names(reg.data) = c("qd", "fac1", "fac2", "fac3", "fac4")
indice = sample(1:nrow(reg.data),0.7*nrow(reg.data))
reg.train = reg.data[indice,]
reg.test = reg.data[-indice,]
reg_fac = lm(QD~., reg.train)
reg.data = as.data.frame(cbind(cricket$QD, fa_cricket$scores))
names(reg.data) = c("qd", "fac1", "fac2", "fac3", "fac4")
indice = sample(1:nrow(reg.data),0.7*nrow(reg.data))
reg.train = reg.data[indice,]
reg.test = reg.data[-indice,]
reg_fac = lm(qd~., reg.train)
summary(reg_fac)
vif(reg_fac)
pred_fac = predict(reg_fac, newdata = reg.test, type = "response")
reg.test$"qd predicted" = pred_fac
reg.test
reg.test[c("qd","qd predicted")]
bfi
remove_missing(bfi)
head(bfi)
bfi = remove_missing(bfi)
head(bfi)
head(bfi,10)
bfi1 = bfi[,-c(26:28)]
matbfi = cor(bfi1)
corrplot(matbfi, method = "number")
KMO(bfi1)
cortest.bartlett(bfi1)
cortest.bartlett(cricket2)#bartlett test has similar function as kmo
det(cor(bfi1))
fa_bfi = fa(bfi, nfactors = ncol(bfi1), rotate = "none")
nfa_bfi = length(fa_bfi$e.values)
scree_bfi = data.frame(
factor_nbfi = as.factor(1:nfa_bfi),
eigenval_bfi = fa_bfi$e.values
)
ggplot(scree_bfi, aes(x = factor_nbfi, y = eigenval_bfi, group = 1))+geom_point()+geom_line()+
xlab("number of factors")+ylab("initial eigenvalue")+labs(title = "scree plot", subtitle = "(based on unreduced correlation matrix")
fa_bfi = fa(bfi1, nfactors = ncol(bfi1), rotate = "none")
nfa_bfi = length(fa_bfi$e.values)
scree_bfi = data.frame(
factor_nbfi = as.factor(1:nfa_bfi),
eigenval_bfi = fa_bfi$e.values
)
ggplot(scree_bfi, aes(x = factor_nbfi, y = eigenval_bfi, group = 1))+geom_point()+geom_line()+
xlab("number of factors")+ylab("initial eigenvalue")+labs(title = "scree plot", subtitle = "(based on unreduced correlation matrix")
fa_bfi = fa(bfi, nfactors = ncol(bfi1), rotate = "none")
nfa_bfi = length(fa_bfi$e.values)
scree_bfi = data.frame(
factor_nbfi = as.factor(1:nfa_bfi),
eigenval_bfi = fa_bfi$e.values
)
ggplot(scree_bfi, aes(x = factor_nbfi, y = eigenval_bfi, group = 1))+geom_point()+geom_line()+
xlab("number of factors")+ylab("initial eigenvalue")+labs(title = "scree plot", subtitle = "(based on unreduced correlation matrix")
fa.parallel(bfi)
fa.parallel(bfi1)
fa.parallel(bfi)
fa_bfi1 = fa(bfi, nfactors = 7, rotate = "varimax")
fa.diagram(fa_bfi1)
fa_bfi1 = fa(bfi1, nfactors = 6, rotate = "varimax")
fa.diagram(fa_bfi1)
fa_bfi1 = fa(bfi1, nfactors = 5, rotate = "varimax")
fa_bfi1 = fa(bfi1, nfactors = 5, rotate = "none")
fa_bfi1 = fa(bfi1, nfactors = 6, rotate = "none")
fa.diagram(fa_bfi1)
fa_bfi1 = fa(bfi1, nfactors = 6, rotate = "varimax")
fa.diagram(fa_bfi1)
fa_bfi1 = fa(bfi1, nfactors = 5, rotate = "varimax")
fa.diagram(fa_bfi1)
fa_bfi1 = fa(bfi1, nfactors = 5, rotate = "varimax", fm = "pa")
fa.diagram(fa_bfi1)
fa_bfi1
fa_bfi1 = fa(bfi1, nfactors = 6, rotate = "varimax", fm = "pa")
fa_bfi1
fa_bfi1 = fa(bfi1, nfactors = 7, rotate = "varimax", fm = "pa")
fa_bfi1
fa_bfi1 = fa(bfi1, nfactors = 4, rotate = "varimax", fm = "pa")
fa.diagram(fa_bfi1)
fa_bfi1
fa_bfi1 = fa(bfi1, nfactors = 6, rotate = "varimax", fm = "pa")
fa.diagram(fa_bfi1)
fa_bfi1
fa_bfi1 = fa(bfi1, nfactors = 5, rotate = "varimax", fm = "pa")
fa.diagram(fa_bfi1)
fa_bfi1
fa_bfi = fa(bfi1, nfactors = ncol(bfi1), rotate = "none")
nfa_bfi = length(fa_bfi$e.values)
scree_bfi = data.frame(
factor_nbfi = as.factor(1:nfa_bfi),
eigenval_bfi = fa_bfi$e.values
)
ggplot(scree_bfi, aes(x = factor_nbfi, y = eigenval_bfi, group = 1))+geom_point()+geom_line()+
xlab("number of factors")+ylab("initial eigenvalue")+labs(title = "scree plot", subtitle = "(based on unreduced correlation matrix")
fa.parallel(bfi)
fa.parallel(bfi1)
fa_bfi1
fa.diagram(fa_bfi1)
fa_bfi1 = fa(bfi1, nfactors = 6, rotate = "varimax", fm = "pa")
fa.diagram(fa_bfi1)
head(fa_bfi1$scores,10)
##use a different dataset
complete = data(bfi)
bfi
bfi = remove_missing(data(bfi))
bfi = remove_missing(bfi)
complete
##use a different dataset
complete = bfi
bfi = remove_missing(bfi)
rm(complete)
fa_bfi1 = fa(bfi, nfactors = 6, rotate = "varimax", fm = "pa")
fa.diagram(fa_bfi1)
fa_bfi1
fa_bfi1 = fa(bfi, nfactors = 6, rotate = "none", fm = "pa")
fa_bfi1
fa_bfi1 = fa(bfi, nfactors = 6, rotate = "varimax", fm = "pa")
fa.diagram(fa_bfi1)
fa_bfi1
head(fa_bfi1$scores,10)
rm(list = ls())
library(car)
library(RColorBrewer)
###data
data("iris")
iris = as.matrix(iris[, 1:4])
###plot data
scatterplotMatrix(iris)
##profile plot
makeProfilePlot <- function(mylist,names)
{
require(RColorBrewer)
# find out how many variables we want to include
numvariables <- length(mylist)
# choose 'numvariables' random colours
colours <- brewer.pal(numvariables,"Set1")
# find out the minimum and maximum values of the variables:
mymin <- 1e+20
mymax <- 1e-20
for (i in 1:numvariables)
{
vectori <- mylist[[i]]
mini <- min(vectori)
maxi <- max(vectori)
if (mini < mymin) { mymin <- mini }
if (maxi > mymax) { mymax <- maxi }
}
# plot the variables
for (i in 1:numvariables)
{
vectori <- mylist[[i]]
namei <- names[i]
colouri <- colours[i]
if (i == 1) { plot(vectori,col=colouri,type="l",ylim=c(mymin,mymax)) }
else         { points(vectori, col=colouri,type="l")                                     }
lastxval <- length(vectori)
lastyval <- vectori[length(vectori)]
text((lastxval-10),(lastyval),namei,col="black",cex=0.6)
}
}
iris_list = list(iris[,1],iris[,2],iris[,3],iris[,4])
makeProfilePlot(iris_list, names(iris[1,]))
##Covariance and correlation on multivariate variable
#scatterplot data
scatterplotMatrix(iris)
#from the scatterplot, subjectively, there are pairs of variables which shown a trend of covary
#covary on multivariate data can be described as : tendency to create pattern relative to each variables mean
#for instance : petal length and petal width which create a similar data point spread around each of their means
#to help on looking on this pattern, profile plot can be used
#profile plot
makeProfilePlot = function(list,name){
require(RColorBrewer)
# finding how many variables to include
numvar = length(list)
# choose 'numvar' random colours
colours = brewer.pal(numvar,"Set1")
# finding the minimum and maximum values of the variables:
mymin = 1e+20
mymax = 1e-20
for (i in 1:numvar)
{
vectori <- list[[i]]
mini = min(vectori)
maxi = max(vectori)
if (mini < mymin) { mymin = mini }
if (maxi > mymax) { mymax = maxi }
}
# plot the variables
for (i in 1:numvar)
{
vectori <- list[[i]]
namei <- name[i]
colouri <- colours[i]
if (i == 1) { plot(vectori,col=colouri,type="l",ylim=c(mymin,mymax)) }
else         { points(vectori, col=colouri,type="l")                                     }
lastxval <- length(vectori)
lastyval <- vectori[length(vectori)]
text((lastxval-10),(lastyval),namei,col="black",cex=0.6)
}
}
#from the scatterplot, subjectively, there are pairs of variables which shown a trend of covary
#covary on multivariate data can be described as : tendency to create pattern relative to each variables mean
#for instance : petal length and petal width which create a similar data point spread around each of their means
#to help on looking on this pattern, profile plot can be used
#profile plot
Profile_Plot = function(list,name){
require(RColorBrewer)
# finding how many variables to include
numvar = length(list)
# choose 'numvar' random colours
colours = brewer.pal(numvar,"Set1")
# finding the minimum and maximum values of the variables:
mymin = 1e+20
mymax = 1e-20
for (i in 1:numvar)
{
vectori <- list[[i]]
mini = min(vectori)
maxi = max(vectori)
if (mini < mymin) { mymin = mini }
if (maxi > mymax) { mymax = maxi }
}
# plot the variables
for (i in 1:numvar)
{
vectori <- list[[i]]
namei <- name[i]
colouri <- colours[i]
if (i == 1) { plot(vectori,col=colouri,type="l",ylim=c(mymin,mymax)) }
else         { points(vectori, col=colouri,type="l")                                     }
lastxval <- length(vectori)
lastyval <- vectori[length(vectori)]
text((lastxval-10),(lastyval),namei,col="black",cex=0.6)
}
}
rm(makeProfilePlot())
rm(makeProfilePlot)
Profile_Plot(iris_list, names(iris[1,]))
###mean n cov
##mean per collumn
n = dim(iris)[1]
j = as.matrix(rep(1, dim(iris)[1]))
mean_iris = 1/n*t(iris)%*%j #  calculate means of all columns
mean_iris
apply(iris, 2, mean)
##cov matrix
mean_matrix = matrix(data = 1, nrow = n)%*%cbind(mean_iris[[1]], mean_iris[[2]], mean_iris[[3]], mean_iris[[4]])
head(mean_matrix)
cov = 1/(n-1)*t(iris-mean_matrix)%*%(iris-mean_matrix)
cov
cov(iris)
##cor matrix
diag(cov)
d = diag(diag(cov)^(-1/2))
d
cor = d%*%cov%*%d
cor
#from the scatterplot, subjectively, there are pairs of variables which shown a trend of covary
#covary on multivariate data can be described as : tendency to create pattern relative to each variables mean
#for instance : petal length and petal width which create a similar data point spread around each of their means
plot(iris[,3], iris[,4])
iris
###Characterizing and displaying multivariate data###
library(car)
library(RColorBrewer)
cor(iris)#simplified using function from stats library
##apply to food texture data
read.csv('food-texture.csv')
##apply to food texture data
food_text = read.csv('food-texture.csv')
food_text = food_text[,-1]
#scatterplot food texture data
scatterplotMatrix(food_text)
plot(food_text[,1], food_text[,2])
food_text-list = list(food_text)
food_text_list = list(food_text)
food_text_list
Profile_Plot(food_text_list)
food_text_list = list(food_text[,1], food_text[,2], food_text[,3], food_text[,4], food_text[,5])
Profile_Plot(food_text_list)
food_text
food_text[1,]
names(food_text)
Profile_Plot(food_text_list, names(food_text))
food_text_list = list(food_text[,1], food_text[,3], food_text[,4], food_text[,5])
Profile_Plot(food_text_list, names(food_text))
food_text_list = list(food_text[,1], food_text[,2], food_text[,3], food_text[,4], food_text[,5])
Profile_Plot(food_text_list, names(food_text))
food_text_list.2 = list(food_text[,1], food_text[,3], food_text[,4], food_text[,5])
Profile_Plot(food_text_list2, names(food_text))#density has high value's gap than the rest
Profile_Plot(food_text_list.2, names(food_text))#density has high value's gap than the rest
Profile_Plot(food_text_list.2, names(food_text[,-2]))#density has high value's gap than the rest
food_text_list.3 = list(food_text[,1], food_text[,3], food_text[,4])
Profile_Plot(food_text_list.3, names(food_text[,-2||-5]))#hardness has high value's gap than the rest
Profile_Plot(food_text_list.3, names(food_text[,-2&&-5]))#hardness has high value's gap than the rest
Profile_Plot(food_text_list.3, names(food_text[,-c(2,5)]))#hardness has high value's gap than the rest
#Mean and sd
sapply(food_text, mean)
apply(food_text, 2, mean)
#Mean and sd
lapply(food_text, mean)
sapply(food_text, sd)
#covariance and correlation matrix
cov(food_text)
cor(food_text)
calcium <- read.table("G:/My Drive/Github/Multivariate-Statistics-R/T3_4_CALCIUM.DAT", quote="\"", comment.char="")
View(calcium)
###Exercise from Methods_of_Multivariate_Analysis-_3rd_Edition Rencher & Christensen###
###chapter 3
calcium <- read.table("T3_4_CALCIUM.DAT", quote="\"", comment.char="")
rm(calcium)
###Exercise from Methods_of_Multivariate_Analysis-_3rd_Edition Rencher & Christensen###
###chapter 3
calcium = read.table("T3_4_CALCIUM.DAT", quote="\"", comment.char="")
bone = read.table("T3_7_BONE.DAT", quote="\"", comment.char="")
glucose = read.table("T3_9_GLUCOSE.DAT", quote="\"", comment.char="")
glucose = read.table("T3_9_GLUCOSE.DAT", quote="\"", comment.char="")
glucose = read.table("T3_9_GLUCOSE.DAT", quote="\"", comment.char="")
glucose <- read.table("G:/My Drive/Github/Multivariate-Statistics-R/T3_9_GLUCOSE.DAT", quote="\"", comment.char="")
View(glucose)
glucose = read.table("T3_9_GLUCOSE.DAT", quote="\"", comment.char="")
